<!DOCTYPE html>
<html>
<head>
    <title>Team Cost Admin App</title>
    <!--  (c) 2016 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Wed Jul 18 2018 12:58:56 GMT-0700 (PDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Wed Jul 18 2018 12:58:56 GMT-0700 (PDT)";
        var BUILDER = "rajan08";
        var CHECKSUM = 40973177735;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350,
    
    informationalConfig: null,
    
    items: [{xtype:'container', itemId:'information' }],
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/var BUILDER = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
       
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
   
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    var stored_checksum = me._generateChecksum(text);
                    if ( CHECKSUM !== stored_checksum ) {
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    _addToContainer: function(container){
        var config = Ext.apply({
            xtype:'container',
            height: 200,
            overflowY: true
        }, this.informationalConfig);
        
        container.add(config);
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if ( !Ext.isEmpty( this.informationalConfig ) ) {
            var container = this.down('#information');
            this._addToContainer(container);
            
        }
        
        if (! app.isExternal() ) {
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            dock: 'bottom',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml,
                doc: 'top'
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            dock:'bottom',
            html:"This app was created by the CA AC Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html: Ext.String.format("Build date/time: {0} ({1})",
                    APP_BUILD_DATE,
                    BUILDER)
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('CArABU.technicalservices.Exporter',{

    mixins: {
        observable: 'Ext.util.Observable'
    },
    constructor: function (config) {
        this.mixins.observable.constructor.call(this, config);
    },
    saveCSVToFile:function(csv,file_name,type_object){
        if (type_object === undefined){
            type_object = {type:'text/csv;charset=utf-8'};
        }
        this.saveAs(csv,file_name, type_object);
    },
    saveAs: function(textToWrite, fileName)
    {
        if (Ext.isIE9m){
            Rally.ui.notify.Notifier.showWarning({message: "Export is not supported for IE9 and below."});
            return;
        }

        var textFileAsBlob = null;
        try {
            textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});
        }
        catch(e){
            window.BlobBuilder = window.BlobBuilder ||
                window.WebKitBlobBuilder ||
                window.MozBlobBuilder ||
                window.MSBlobBuilder;
            if (window.BlobBuilder && e.name === 'TypeError'){
                bb = new BlobBuilder();
                bb.append([textToWrite]);
                textFileAsBlob = bb.getBlob("text/plain");
            }

        }

        if (!textFileAsBlob){
            Rally.ui.notify.Notifier.showWarning({message: "Export is not supported for this browser."});
            return;
        }

        var fileNameToSaveAs = fileName;

        if (Ext.isIE10p){
            window.navigator.msSaveOrOpenBlob(textFileAsBlob,fileNameToSaveAs); // Now the user will have the option of clicking the Save button and the Open button.
            return;
        }

        var url = this.createObjectURL(textFileAsBlob);

        if (url){
            var downloadLink = document.createElement("a");
            if ("download" in downloadLink){
                downloadLink.download = fileNameToSaveAs;
            } else {
                //Open the file in a new tab
                downloadLink.target = "_blank";
            }

            downloadLink.innerHTML = "Download File";
            downloadLink.href = url;
            if (!Ext.isChrome){
                // Firefox requires the link to be added to the DOM
                // before it can be clicked.
                downloadLink.onclick = this.destroyClickedElement;
                downloadLink.style.display = "none";
                document.body.appendChild(downloadLink);
            }
            downloadLink.click();
        } else {
            Rally.ui.notify.Notifier.showError({message: "Export is not supported "});
        }

    },
    createObjectURL: function ( file ) {
        if ( window.webkitURL ) {
            return window.webkitURL.createObjectURL( file );
        } else if ( window.URL && window.URL.createObjectURL ) {
            return window.URL.createObjectURL( file );
        } else {
            return null;
        }
    },
    destroyClickedElement: function(event)
    {
        document.body.removeChild(event.target);
    },
    fetchExportData: function(rootModel, rootFilters, fetch, columns){
        var deferred = Ext.create('Deft.Deferred');
        var rootFetch = Ext.Array.merge(fetch, CArABU.technicalservices.PortfolioItemCostTrackingSettings.getPortfolioItemFetch());
        var me = this;


        var loader = Ext.create('CArABU.technicalservices.RollupDataLoader',{
            portfolioItemTypes: CArABU.technicalservices.PortfolioItemCostTrackingSettings.getPortfolioItemTypes(),
            featureName: CArABU.technicalservices.PortfolioItemCostTrackingSettings.getFeatureName(),
            listeners: {
                rollupdataloaded: function(portfolioHash, stories){
                    //onsole.log('rollupdataloaded', portfolioHash, stories);
                    var rollupData = Ext.create('CArABU.technicalservices.RollupCalculator', {
                        portfolioItemType: rootModel
                    });

                    rollupData.addRollupRecords(portfolioHash, stories);
                    //onsole.log('models updateded', portfolioHash, stories);
                    var exportData = me._getExportableRollupData(portfolioHash[rootModel.toLowerCase()],columns, rollupData);
                    columns = me._getAncestorTypeColumns(rootModel).concat(columns);

                    var csv = me._transformExportableRollupDataToDelimitedString(exportData, columns);
                    this.fireEvent('statusupdate', null);
                    deferred.resolve(csv);
                },
                loaderror: function(msg){
                    deferred.reject(msg);
                },
                statusupdate: function(status){
                    this.fireEvent('statusupdate', status);
                },
                scope: this
            }
        });
        loader.loadTree({model: rootModel, fetch: rootFetch, filters: rootFilters || []});

        return deferred;
    },
    _transformExportableRollupDataToDelimitedString: function(rollupData, columns){
        var csvArray = [],
            delimiter = ",",
            rowDelimiter = "\r\n",
            re = new RegExp(delimiter + '|\"|\r|\n','g');

        var column_keys = _.map(columns, function(c){ return c.costField || c.dataIndex; }),
            column_headers = _.pluck(columns, 'text');

        csvArray.push(column_headers.join(delimiter));

        Ext.Array.each(rollupData, function(obj){
            var data = [];
            Ext.Array.each(column_keys, function(key){
                var val = obj[key];
                if (val){
                    if (re.test(val)){ //enclose in double quotes if we have the delimiters
                        val = val.replace('"','\"\"');
                        val = Ext.String.format("\"{0}\"",val);

                    }
                }
                data.push(val);
            });
            csvArray.push(data.join(delimiter));
        });

        return csvArray.join(rowDelimiter);
    },
    /**
     * Returns an array of hash rollup data
     *
     * @param rootObjectIDs
     * @param columns - the data index of the columns that we want to export.
     * @param rollupData
     * @returns {Array}
     * @private
     */
    _getExportableRollupData: function(records, columns, rollupData){

        var exportData = [],
            me = this;


        _.each(records, function(r){
            var obj = rollupData.getRollupData(r);
            if (obj){
                var ancestors = {};
                var rec = obj.getExportRow(columns, ancestors);
                exportData.push(rec);
                me._addExportChildren(obj,exportData, columns, rollupData,ancestors);
            }
        }, this);
        return exportData;
    },
    _addExportChildren: function(obj, exportData, columns, rollupData,ancestors){
        var new_ancestors = Ext.clone(ancestors),
            me = this;
        new_ancestors[obj._type] = obj.FormattedID;

        var children = obj.children;
        if (children && children.length > 0){
            _.each(children, function(c){
                var row = c.getExportRow(columns, new_ancestors);
                exportData.push(row);
                me._addExportChildren(c, exportData, columns, rollupData, new_ancestors);
            }, this);
        }
        return;
    },
    _getAncestorTypeColumns: function(rootModel){
        var piTypes = CArABU.technicalservices.PortfolioItemCostTrackingSettings.getPortfolioItemTypeObjects(),
            piIdx = -1;

        Ext.Array.each(piTypes, function(piObj, idx){
            if (piObj.typePath.toLowerCase() === rootModel.toLowerCase()){
                piIdx = idx;
            }
        });

        var columns = [{
            dataIndex: 'hierarchicalrequirement',
            text: 'User Story'
        }];

        if (piIdx >= 0){
            columns = columns.concat(Ext.Array.map(piTypes.slice(0,piIdx+1), function(piObj) { return { dataIndex: piObj.typePath.toLowerCase(), text: piObj.name };} ));
            columns.push({
                dataIndex: 'type',
                text: 'Artifact Type'
            });
            columns.reverse();
        }
        return columns;
    },
    fetchWsapiRecords: function(model, query_filters, fetch_fields, context){
        var deferred = Ext.create('Deft.Deferred');

        Ext.create('Rally.data.wsapi.Store',{
            model: model,
            fetch: fetch_fields,
            filters: query_filters,
            context: context,
            limit: Infinity
        }).load({
            callback: function(records, operation, success){
                if (success){
                    deferred.resolve(records);
                } else {
                    deferred.reject(Ext.String.format("Error getting {0} for {1}: {2}", model, query_filters.toString(), operation.error.errors.join(',')));
                }
            }
        });
        return deferred;
    },
    getCSVFromGrid:function(grid){

        var store = grid.getStore();

        var columns = grid.columns;
        var column_names = [];
        var headers = [];

        var csv = [];

        Ext.Array.each(columns,function(column){
            if (column.xtype != 'rallyrowactioncolumn' && (column.dataIndex)) {
                column_names.push(column.dataIndex);
                headers.push(column.csvText || column.text || column.dataIndex);
            }
        });

        csv.push('"' + headers.join('","') + '"');

        var mock_meta_data = {
            align: "right",
            classes: [],
            cellIndex: 9,
            column: null,
            columnIndex: 9,
            innerCls: undefined,
            recordIndex: 5,
            rowIndex: 5,
            style: "",
            tdAttr: "",
            tdCls: "x-grid-cell x-grid-td x-grid-cell-headerId-gridcolumn-1029 x-grid-cell-last x-unselectable",
            unselectableAttr: "unselectable='on'"
        }


        Ext.Array.each(store.getRange(), function(record){
            var node_values = [];
            Ext.Array.each(columns,function(column){
                if (column.xtype != 'rallyrowactioncolumn') {
                    if (column.dataIndex) {
                        var column_name = column.dataIndex;
                        var display_value = record.get(column_name);

                        if (!column._csvIgnoreRender && column.renderer) {
                            if (column.exportRenderer) {
                                display_value = column.exportRenderer(display_value, mock_meta_data, record, 0, 0, store, grid.getView());
                            } else {
                                display_value = column.renderer(display_value, mock_meta_data, record, 0, 0, store, grid.getView());
                            }
                        }
                        var val = "";
                        if (display_value){
                            if (Ext.isObject(display_value)){
                                display_value = display_value._refObjectName || display_value.Name || display_value.FormattedID;
                            }
                            if (isNaN(display_value)){
                                val = display_value.replace(/\"/g,'\"\"');
                            } else {
                                val = display_value;
                            }
                        }
                        val = Ext.String.format("\"{0}\"",val);
                        node_values.push(val);
                    }
                }
            },this);
            csv.push(node_values.join(','));
        });
        return csv.join("\r\n");
    }

});


Ext.define('CArABU.technicalservices.PortfolioCostApps.toolbox',{
    singleton: true,

    snapshotPrefPrefix: 'portfolioSnapshot-v1-',
    teamCostPrefPrefix: 'costAsOf-',
    getSnapshotPreferenceName: function(name){
        return Ext.String.format("{0}{1}",CArABU.technicalservices.PortfolioCostApps.toolbox.snapshotPrefPrefix,name);
    },
    getFriendlyNameFromSnapshot: function(snap){
        var name = snap.get('Name');
        return name.replace(CArABU.technicalservices.PortfolioCostApps.toolbox.snapshotPrefPrefix,'');
    },
    getSnapshotModelType: function(snap){
        var obj = Ext.JSON.decode(snap.get('Value'));
        return obj.type || null;
    },
    getSnapshotData: function(snap){
        var obj = Ext.JSON.decode(snap.get('Value'));
        return obj.data || {};
    },
    getEncodedSnapshotValueString: function(oidValueHash, type){
        var obj = {
            type: type,
            data: oidValueHash
        };
        return Ext.JSON.encode(obj);
    }
});


Ext.define('CArABU.technicalservices.ProjectCostModelBuilder',{
    singleton: true,
    prefPrefix: 'costAsOf-',
    build: function(modelType, newModelName) {
        var deferred = Ext.create('Deft.Deferred');
        var prefPrefix = CArABU.technicalservices.ProjectCostModelBuilder.prefPrefix;

        Rally.data.ModelFactory.getModel({
            type: modelType,
            success: function (model) {

                var default_fields = [{
                    name: '__cost',
                    convert: function(v, record){
                        var obj = record.get('Value');
                        if (obj){
                            obj = Ext.JSON.decode(obj);
                            return obj.cost;
                        }
                    }
                }, {
                    name: '__userDisplayName',
                    convert: function(v, record){
                        var obj = record.get('Value');
                        if (obj) {
                            obj = Ext.JSON.decode(obj);
                            return obj.userDisplayName;
                        }
                    }
                }, {
                    name: '__asOfDate',
                    convert: function(v, record){
                        var obj = record.get('Value');
                        if (obj) {
                            obj = Ext.JSON.decode(obj);
                            return Rally.util.DateTime.fromIsoString(obj.asOfDate);
                        }
                    }
                },{
                    name: '__comments',
                    convert: function(v, record){
                        var obj = record.get('Value');
                        if (obj){
                            obj = Ext.JSON.decode(obj);
                            return obj.comments;
                        }
                    }
                },{
                    name: '__avgDayRate',
                    convert: function(v, record){
                        var obj = record.get('Value');
                        if (obj){
                            obj = Ext.JSON.decode(obj);
                            return obj.avgDayRate;
                        }
                    }
                },{
                    name: '__noOfTeamMembers',
                    convert: function(v, record){
                        var obj = record.get('Value');
                        if (obj){
                            obj = Ext.JSON.decode(obj);
                            return obj.noOfTeamMembers;
                        }
                    }
                },{
                    name: '__teamType',
                    convert: function(v, record){
                        var obj = record.get('Value');
                        if (obj){
                            obj = Ext.JSON.decode(obj);
                            return obj.teamType;
                        }
                    }
                },{
                    name: '__sprintDays',
                    convert: function(v, record){
                        var obj = record.get('Value');
                        if (obj){
                            obj = Ext.JSON.decode(obj);
                            return obj.sprintDays;
                        }
                    }
                },{
                    name: '__averageVelocity',
                    convert: function(v, record){
                        var obj = record.get('Value');
                        if (obj){
                            obj = Ext.JSON.decode(obj);
                            return obj.averageVelocity;
                        }
                    }
                },{
                    name: '__averageStoryCount',
                    convert: function(v, record){
                        var obj = record.get('Value');
                        if (obj){
                            obj = Ext.JSON.decode(obj);
                            return obj.averageStoryCount;
                        }
                    }
                }];

                var new_model = Ext.define(newModelName, {
                    extend: model,
                    logger: new Rally.technicalservices.Logger(),
                    fields: default_fields,
                    prefPrefix: prefPrefix,
                    setCostForProject: function(cost, asOfDate, userName, comments, avgDayRate, noOfTeamMembers,teamType,sprintDays,averageVelocity,averageStoryCount){
                        var isoDate = Rally.util.DateTime.toIsoString(asOfDate),
                            name = this.prefPrefix + isoDate;

                        this.set('Name', name);

                        var obj = {
                            cost: cost,
                            asOfDate: isoDate,
                            userDisplayName: userName,
                            comments: comments,
                            avgDayRate: avgDayRate,
                            noOfTeamMembers: noOfTeamMembers,
                            teamType: teamType,
                            sprintDays:sprintDays,
                            averageVelocity:averageVelocity,
                            averageStoryCount:averageStoryCount
                        };
                        this.logger.log('setCostPerProject', name, obj, cost, asOfDate, userName, comments, avgDayRate, noOfTeamMembers,teamType,sprintDays);

                        this.set('Value', Ext.JSON.encode(obj));
                    }
                });
                deferred.resolve(new_model);
            }
        });
        return deferred;
    }
});
Ext.define("team-cost-admin", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    items: [
        {xtype:'container',itemId:'message_box',tpl:'Hello, <tpl>{_refObjectName}</tpl>'},
        {xtype:'container',itemId:'display_box'}
    ],

    integrationHeaders : {
        name : "team-cost-admin"
    },
    minHeight: 500,
    defaultCost: 1000,
    defaultDayRate: 200,
    defaultSprintDays: 14,
    currency: "$",
    timebox_limit : 10,

    config: {
        defaultSettings: {
            teamTypeField: 'c_TeamType',
            acceptedStoriesField: true,
            currencySign: '$'
        }
    },    
                        
    launch: function() {
        this._initializeApp();
    },

    _fetchPreferenceModel: function(){
        var deferred = Ext.create('Deft.Deferred');
        this.logger.log('_fetchPreferenceModel');
        CArABU.technicalservices.ProjectCostModelBuilder.build('Preference', 'ProjectCostModel').then({
            success: function(model){
                deferred.resolve(model);
            }
        });
        return deferred;
    },

    _buildGrid: function(){

        this.logger.log('_buildGrid');

        if (this.down('rallygrid')){
            this.down('rallygrid').destroy();
        }
        var currency = this.getSetting('currencySign');
        var groupHeaderTpl = Ext.create('Ext.XTemplate',
            '<div><b>{name}</b>   (' + currency + '{children:this.getCurrentCost})</div>',
            {
                getCurrentCost: function(children) {
                    var children = _.sortBy(children, function(c){ return c.get('__asOfDate'); }),
                        currentDate = new Date(),
                        cost = children.slice(-1)[0].get('__cost');

                    Ext.Array.each(children, function(c){
                        var asOfDate = c.get('__asOfDate');
                        if (Rally.util.DateTime.getDifference(currentDate, asOfDate,'hour') >= 0){
                            cost = c.get('__cost');
                            return false;
                        }
                    },this,true);

                    return cost;
                }
            }
        );

        this._fetchPreferenceModel().then({
            success: function(model){
                this.add({
                    xtype: 'rallygrid',
                    storeConfig: {
                        model: model,
                        fetch: ['Name','Project','Type','Value','CreationDate'],
                        filters: [{
                            property: 'Name',
                            operator: "contains",
                            value: CArABU.technicalservices.ProjectCostModelBuilder.prefPrefix
                        },{
                            property: 'Workspace',
                            value: this.getContext().getWorkspace()._ref
                        }],
                        context: {
                            workspace: this.getContext().getWorkspace()._ref,
                            project: null
                        },
                        sorters: [{
                            property: 'Name',
                            direction: 'DESC'
                        }],
                        limit: 'Infinity',
                        groupField: 'Project',
                        groupDir: 'ASC',
                        getGroupString: function(record) {
                            var project = record.get('Project');
                            return (project && project._refObjectName) || 'No Project';
                        }
                    },
                    features: [{
                        ftype: 'groupingsummary',
                        groupHeaderTpl: groupHeaderTpl,
                        startCollapsed: true
                    }],
                    columnCfgs: this._getColumnCfgs(),
                    showRowActionsColumn: false,
                    emptyText: 'No specific project costs defined.',
                    showPagingToolbar: false
                });
            },
            scope: this
        });
    },

    _initializeApp: function(){
        var me = this;
        this.logger.log('_initializeApp');

        if (this.down('#selector_box')){
            this.down('#selector_box').destroy();
        }
        if (this.down('#selector_box_2')){
            this.down('#selector_box_2').destroy();
        }

        var team_types = Ext.create('Ext.data.Store', {
            fields: ['name'],
            data : [
                {"name":"Scrum"},
                {"name":"Kanban"}
            ]
        });

        var margin = 5;
        this.add({
            xtype: 'container',
            itemId: 'selector_box',
            layout: 'hbox',

            items: [{
                xtype: 'rallycombobox',
                fieldLabel: 'Team',
                itemId: 'cb-team',
                labelAlign: 'right',
                margin: margin,
                width: 300,
                labelWidth: 75,
                storeConfig: {
                    model: 'Project',
                    autoLoad: true,
                    remoteFilter: false,
                    limit: 'Infinity',
                    fetch: ['Name','_ref','TeamMembers',me.getSetting('teamTypeField')],
                    sorters: [{
                        property: 'Name',
                        direction: 'ASC'
                    }]
                },
                displayField: 'Name',
                valueField: '_ref',
                listeners: {
                    change: function(cb){
                        console.log('Project CB', cb);
                        me.project = cb.getRecord();
                        me._prePopulateValues(me.project);
                    },
                    scope:me
                }
            },{
                xtype: 'rallynumberfield',
                itemId: 'nb-cost',
                fieldLabel: 'SPOC',
                margin: margin,
                width: 175,
                labelWidth: 100,
                labelAlign: 'right',
                minValue: 1,
                value: this.defaultCost
            },{
                xtype: 'rallynumberfield',
                itemId: 'nb-sprint-days',
                fieldLabel: 'Iteration /<br>Sprint Days',
                margin: margin,
                width: 175,
                labelWidth: 100,
                labelAlign: 'right',
                minValue: 1,
                listeners:{
                    change:me._calculateCost,
                    scope:me
                }
            },{
                xtype: 'rallynumberfield',
                itemId: 'nb-average-velocity',
                fieldLabel: 'Average <br>Velocity',
                margin: margin,
                width: 175,
                labelWidth: 100,
                labelAlign: 'right',
                minValue: 1,
                listeners:{
                    change:me._calculateCost,
                    scope:me
                }
            },{
                xtype: 'rallydatefield',
                itemId: 'dt-asOfDate',
                fieldLabel: 'as Of Date',
                margin: margin,
                labelAlign: 'right',
                width: 250,
                labelWidth: 100,
                value: new Date()
            },{
                xtype: 'rallynumberfield',
                itemId: 'nb-number-of-sprints',
                fieldLabel: 'Number of Sprints',
                margin: margin,
                width: 175,
                labelWidth: 100,
                labelAlign: 'right',
                minValue: 1,
                value: me.timebox_limit,
                listeners:{
                    change: function(){
                        me._prePopulateValues(me.project);
                    },
                    scope:me
                }
            }]
        });

        this.add({
            xtype: 'container',
            itemId: 'selector_box_2',
            layout: 'hbox',

            items: [{
                xtype: 'rallytextfield',
                itemId: 'tx-comment',
                fieldLabel: 'Comments',
                margin: margin,
                width: 300,
                labelWidth: 75,
                labelAlign: 'right',
                minValue: 1,
                emptyText: 'Enter Comments here...'
            },{
                xtype: 'rallynumberfield',
                itemId: 'nb-avg-day-rate',
                fieldLabel: 'Average Day Rate',
                margin: margin,
                width: 175,
                labelWidth: 100,
                labelAlign: 'right',
                minValue: 1,
                value: this.defaultDayRate,
                listeners:{
                    change:me._calculateCost,
                    scope:me
                }
            },{
                xtype: 'rallynumberfield',
                itemId: 'nb-team-members',
                fieldLabel: '# Team Members',
                margin: margin,
                width: 175,
                labelWidth: 100,
                labelAlign: 'right',
                minValue: 1,
                listeners:{
                    change:me._calculateCost,
                    scope:me
                }
            },{
                xtype: 'rallynumberfield',
                itemId: 'nb-average-story-count',
                fieldLabel: 'Average <br>Story Count',
                margin: margin,
                width: 175,
                labelWidth: 100,
                labelAlign: 'right',
                minValue: 1,
                listeners:{
                    change:me._calculateCost,
                    scope:me
                }
            },{
                xtype: 'rallycombobox',
                itemId: 'cb-team-type',
                fieldLabel: 'Team Type',
                store: team_types,
                queryMode: 'local',
                displayField: 'name',
                valueField: 'name',
                labelAlign: 'right',
                width: 250,
                labelWidth: 100,
                allowNoEntry: true,
                listeners:{
                    change:me._calculateCost,
                    scope:me
                }
            },{
                xtype: 'rallybutton',
                text: '+Add',
                margin: margin,
                listeners: {
                    scope: this,
                    click: this._addCost
                }
            },{
                xtype: 'rallybutton',
                iconCls: 'icon-export secondary',
                margin: '5 25 5 5',
                listeners: {
                    scope: this,
                    click: this._export
                }
            }
            // ,{
            //      xtype: 'rallyfieldpicker',
            //      autoExpand: false,
            //      modelTypes: ['Project']
            //  }
             ]
        });        
        this._buildGrid();
    },

    _prePopulateValues: function(project){
        var me= this;
        //this.down('#nb-sprint-days').setValue(this._getTotalSprintDays());
        this._fetchIterations().then({
            success: function(records){
                console.log('_fetchIterations', records);

                var timebox_limit = me.down('#nb-number-of-sprints').getValue() || 1;

                var total_points = 0;
                this.down('#nb-average-story-count').setValue(Ext.util.Format.round(records.length / timebox_limit, 2));

                _.each(records,function(story){
                    if(me.getSetting('acceptedStoriesField')){
                        if(story.get('ScheduleState') == "Accepted"){
                            total_points += story.get('PlanEstimate') || 0;
                        }                        
                    }else{
                        total_points += story.get('PlanEstimate') || 0;
                    }

                });
                this.down('#nb-average-velocity').setValue(Ext.util.Format.round(total_points / timebox_limit, 2));

                this.down('#nb-team-members').setValue(project && project.get('TeamMembers').Count || 1);
                this.down('#cb-team-type').setValue(project && project.get(me.getSetting('teamTypeField')) || null);

                this._calculateCost();
            },
            scope:this
        })
    },

    _calculateCost:function(){
        var team_type = this.down('#cb-team-type') && this.down('#cb-team-type').getValue() || null;
        // if(!team_type || team_type == ""){
        //     this._showError('Error: Team Type must be selected');
        //     return;
        // }

        var spoc = 0;
        var team_members = this.down('#nb-team-members').getValue() > 0 ?  this.down('#nb-team-members').getValue() : 1,
            day_day_rate = this.down('#nb-avg-day-rate').getValue(),
            total_sprint_days = this.down('#nb-sprint-days').getValue() > 0 ? this.down('#nb-sprint-days').getValue():1, 

            avg_velocity = this.down('#nb-average-velocity').getValue();
            avg_story_count = this.down('#nb-average-story-count').getValue();

        if('Scrum' == team_type && avg_velocity > 0){
            spoc = ((total_sprint_days * team_members * day_day_rate) / avg_velocity);
        }

        if('Kanban' == team_type && avg_story_count > 0){
            spoc = ((total_sprint_days * team_members * day_day_rate) / avg_story_count);
        }


        this.down('#nb-cost').setValue(Ext.util.Format.round(spoc,2));

    },


    _fetchIterations: function() {

        this.logger.log("_fetchIterations");

        var me = this,
            deferred = Ext.create('Deft.Deferred')
            var timebox_limit = me.down('#nb-number-of-sprints').getValue() || 1;
                
        me.setLoading("Fetching iterations...");
        
        var config = {
            model:  'Iteration',
            limit: timebox_limit,
            pageSize: timebox_limit,
            fetch: ['Name','StartDate','EndDate','WorkProducts','PlanEstimate'],
            filters: [{property:'EndDate', operator: '<=', value: Rally.util.DateTime.toIsoString(new Date)},{property:'Project',value:me.project.get('_ref')}],
            sorters: [{property:'EndDate', direction:'DESC'}],
            context:{
                project: null
            }            
        };

        me.loadWsapiRecords(config).then({
            success: function(records){
                me.setLoading(false);
                console.log('iterations>>',records);
                if(records.length < 1){
                    this._showWarning('Warning: No Iterations found');
                    this.down('#nb-sprint-days').setValue(0);
                }else{

                    var last_sprint = records[0];
                    var sprint_days = Rally.util.DateTime.getDifference(last_sprint.get('EndDate'),last_sprint.get('StartDate'),'day') || 0;
                    this.down('#nb-sprint-days').setValue(sprint_days);
                    // this.down('#nb-sprint-days')
                    var story_filter = [];

                    _.each(records, function(iteration){
                        story_filter.push({property:'Iteration.Name', value:iteration.get('Name') });
                    });

                    //story_filter = Rally.data.wsapi.Filter.or(story_filter).and( {property:'ScheduleState', value:'Accepted' });
                    story_filter = Rally.data.wsapi.Filter.or(story_filter);
                    
                    console.log('story filter', story_filter.toString() );
                    var store_config = {
                        model:  'HierarchicalRequirement',
                        fetch: ['Name','PlanEstimate','Iteration','ScheduleState'],
                        filters: story_filter,
                        context:{
                            projectScopeDown:false,
                            project: me.project.get('_ref')
                        }
                    };

                    Deft.Promise.all([ me.loadWsapiRecords(store_config), me.loadWsapiRecords(Ext.Object.merge(store_config, {model: 'Defect'}))]).then({
                        success: function(records){
                            console.log('Stories',records);

                            deferred.resolve(Ext.Array.flatten(records));
                        },
                        scope:me
                    });

                }
            },
            failure: function(msg) {
                me.setLoading(false);
                deferred.reject(msg);
            },
            scope: me
        });

        return deferred.promise;
    },

    _getAverageStoryCount: function(){
        console.log('_getAverageStoryCount', this.storyCount);
        return this.storyCount || 0;
    },

    _export: function(){
        this.logger.log('_export');
        var exporter = Ext.create('CArABU.technicalservices.Exporter');
        var grid = this.down('rallygrid'),
            fileName = "project-cost-export-" + Rally.util.DateTime.format(new Date(), 'Y-m-d') + '.csv';
        if (grid){
            var csv = exporter.getCSVFromGrid(grid);
            exporter.saveCSVToFile(csv, fileName);
        }
    },

    _addCost: function(){
        var team = this.down('#cb-team') && this.down('#cb-team').getRecord(),
            cost = this.down('#nb-cost') && this.down('#nb-cost').getValue(),
            asOfDate = this.down('#dt-asOfDate') && this.down('#dt-asOfDate').getValue() || new Date(),
            userName = this.getContext().getUser().UserName,
            avgDayRate = this.down('#nb-avg-day-rate') && this.down('#nb-avg-day-rate').getValue(),
            noOfTeamMembers = this.down('#nb-team-members') && this.down('#nb-team-members').getValue(),
            teamType = this.down('#cb-team-type') && this.down('#cb-team-type').getValue(),
            sprintDays = this.down('#nb-sprint-days') && this.down('#nb-sprint-days').getValue(),
            averageVelocity = this.down('#nb-average-velocity') && this.down('#nb-average-velocity').getValue(),
            averageStoryCount = this.down('#nb-average-story-count') && this.down('#nb-average-story-count').getValue(),

            comments = this.down('#tx-comment') && this.down('#tx-comment').getValue();

        this.logger.log('_addCost', team, cost, asOfDate, userName);
        var grid = this.down('rallygrid');
        if (grid){
           var newPref = Ext.create('ProjectCostModel',{
                Project: team.get('_ref'),
                Workspace: this.getContext().getWorkspace()._ref
            });
            newPref.setCostForProject(cost, asOfDate, userName,comments,avgDayRate,noOfTeamMembers,teamType,sprintDays,averageVelocity,averageStoryCount);
            if (this._validate(grid.getStore(), newPref)){
                newPref.save();
                grid.getStore().add(newPref);
            }
        }
    },

    _validate: function(store, newPref){
        //verify that we aren't adding dups...
        var dup = false;
        Ext.Array.each(store.getRange(), function(r){
            if (r.get('Name') === newPref.get('Name') && r.get('Project') && r.get('Project')._ref === newPref.get('Project')){
                this.logger.log('_validate duplicate found: ',r.get('Name'), newPref.get('Name'),r.get('Project')._ref, newPref.get('Project'))
                dup = true;
                return false;
            }
        }, this);

        if (dup){
            this._showError("There is already a cost defined for the selected Project and Day.  To update the cost, please remove the existing one first.");
            return false;
        }
        return true;
    },

    _getColumnCfgs: function(){
        var me = this,
            currency = this.getSetting('currencySign');

        return [{
            xtype: 'rallyrowactioncolumn',
            //Need to override this since we don't want a menu...
            _renderGearIcon: function(value, metaData, record) {
                return '<div class="row-action-icon icon-delete"/>';
            },
            _showMenu: function(view, el) {
                me.logger.log('_removeEntry');
                var selectedRecord = view.getRecord(Ext.fly(el).parent("tr"));
                selectedRecord.destroy();
            }
        },
            {dataIndex: 'Project', text: 'Project', flex: 2},
            {dataIndex: '__cost', text: 'Cost', flex: 1, renderer: function(v){
                return Ext.String.format('{0} {1}', currency, v);
            }},
            {dataIndex: '__asOfDate', text: 'As of Date', flex: 1, renderer: function(v){
                return Rally.util.DateTime.format(v, 'Y-m-d');
            }},
            {dataIndex: '__userDisplayName', text: 'User', flex: 2},
            {dataIndex: '__sprintDays', text: 'Sprint Days', flex: 2},
            {dataIndex: '__avgDayRate', text: 'Average <br>Day Rate', flex: 2},
            {dataIndex: '__noOfTeamMembers', text: '# Team Members', flex: 2},
            {dataIndex: '__teamType', text: 'Team Type', flex: 2},
            {dataIndex: '__averageVelocity', text: 'Average <br>Velocity', flex: 2},
            {dataIndex: '__averageStoryCount', text: 'Average <br>Story Count', flex: 2},
            {dataIndex: '__comments', text: 'Comments', flex: 2}];
    },

    loadWsapiRecords: function(config,returnOperation){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
                
        var default_config = {
            model: 'Defect',
            fetch: ['ObjectID']
        };
        Ext.create('Rally.data.wsapi.Store', Ext.Object.merge(default_config,config)).load({
            callback : function(records, operation, successful) {
                if (successful){
                    if ( returnOperation ) {
                        deferred.resolve(operation);
                    } else {
                        deferred.resolve(records);
                    }
                } else {
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },

    getSettingsFields: function() {
        var check_box_margins = '5 0 5 0';
        var currency_store = Ext.create('Rally.data.custom.Store', {
            data: [
                {name: "US Dollars", value: "$"},
                {name: "Euro", value: "&#128;"},
                {name: "Pound", value: "&#163;"},
                {name: "Japanese Yen", value: "&#165;"},
                {name: "Brazilian Real", value: "R$"},
                {name: "South African Rand", value: "R"}
            ]
        });

        return [{
            name: 'teamTypeField',
            itemId:'teamTypeField',
            xtype: 'rallyfieldcombobox',
            fieldLabel: 'Team Type Field',
            labelWidth: 125,
            labelAlign: 'left',
            minWidth: 200,
            margin: '10 10 10 10',
            model: 'Project',
            allowBlank: false
        },{
            name: 'acceptedStoriesField',
            itemId:'acceptedStoriesField',
            xtype: 'rallycheckboxfield',
            fieldLabel: 'Use only Accepted Stories to calculate Average Velocity',
            labelWidth: 125,
            labelAlign: 'left',
            minWidth: 200,
            margin: '10 10 10 10'
        },{
            xtype: 'rallycombobox',
            name: 'currencySign',
            store: currency_store,
            displayField: 'name',
            valueField: 'value',
            labelWidth: 125,
            labelAlign: 'left',
            minWidth: 200,
            margin: '10 10 10 10'
        }];
    },

    _showError: function(msg){
        this.logger.log('_showError', msg);
        Rally.ui.notify.Notifier.showError({ message: msg });
    },

    _showWarning: function(msg){
        this.logger.log('_showWarning', msg);
        Rally.ui.notify.Notifier.showWarning({ message: msg });
    },

    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        // Ext.apply(this, settings);
        this.launch();
    }
});

            
               Rally.launchApp('team-cost-admin', {
                   name: 'Team Cost Admin App'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>